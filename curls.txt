// üöÄ Run Command:
// npm install && npm start

// üóÇÔ∏è Supabase SQL Schema Setup:
/*
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE disasters (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT,
  location_name TEXT,
  location GEOGRAPHY(Point, 4326),
  description TEXT,
  tags TEXT[],
  owner_id TEXT,
  created_at TIMESTAMP,
  audit_trail JSONB
);

CREATE TABLE reports (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  disaster_id UUID,
  user_id TEXT,
  content TEXT,
  image_url TEXT,
  verification_status TEXT,
  created_at TIMESTAMP
);

CREATE TABLE resources (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  disaster_id UUID,
  name TEXT,
  location_name TEXT,
  location GEOGRAPHY(Point, 4326),
  type TEXT,
  created_at TIMESTAMP
);

CREATE TABLE cache (
  key TEXT PRIMARY KEY,
  value JSONB,
  expires_at TIMESTAMP
);

CREATE INDEX disasters_location_idx ON disasters USING GIST (location);
CREATE INDEX resources_location_idx ON resources USING GIST (location);
CREATE INDEX disasters_tags_idx ON disasters USING GIN (tags);
CREATE INDEX disasters_owner_idx ON disasters (owner_id);

CREATE OR REPLACE FUNCTION get_nearby_resources(lat DOUBLE PRECISION, lon DOUBLE PRECISION, radius INTEGER)
RETURNS SETOF resources AS $$
  SELECT * FROM resources
  WHERE ST_DWithin(
    location,
    ST_SetSRID(ST_MakePoint(lon, lat), 4326)::geography,
    radius
  );
$$ LANGUAGE sql;
*/

// üì¶ Postman Collection Export: Use below sample curl commands to test endpoints
/*
1. Create Disaster:
@swagger
/disasters:
  post:
    summary: Create a new disaster
    tags: [Disasters]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              location_name:
                type: string
              description:
                type: string
              tags:
                type: array
                items:
                  type: string
    responses:
      201:
        description: Disaster created successfully
*/
curl -X POST http://localhost:3000/disasters \
  -H "Content-Type: application/json" \
  -d '{"title": "NYC Flood", "location_name": "Manhattan, NYC", "description": "Flooding", "tags": ["flood"]}'

/*
2. Get All Disasters:
@swagger
/disasters:
  get:
    summary: Get all disasters
    tags: [Disasters]
    parameters:
      - in: query
        name: tag
        schema:
          type: string
        description: Filter disasters by tag
    responses:
      200:
        description: A list of disasters
*/
curl http://localhost:3000/disasters

/*
3. Update Disaster:
@swagger
/disasters/{id}:
  put:
    summary: Update a disaster
    tags: [Disasters]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
    responses:
      200:
        description: Disaster updated successfully
*/
curl -X PUT http://localhost:3000/disasters/<id> \
  -H "Content-Type: application/json" \
  -d '{"title": "Updated Flood"}'

/*
4. Delete Disaster:
@swagger
/disasters/{id}:
  delete:
    summary: Delete a disaster
    tags: [Disasters]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    responses:
      200:
        description: Disaster deleted successfully
*/
curl -X DELETE http://localhost:3000/disasters/<id>

/*
5. Geocode:
@swagger
/disasters/geocode:
  post:
    summary: Extract location and convert to lat/lng
    tags: [Geocoding]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              description:
                type: string
    responses:
      200:
        description: Location and coordinates returned
*/
curl -X POST http://localhost:3000/disasters/geocode \
  -H "Content-Type: application/json" \
  -d '{"description": "Flooding in Manhattan, NYC"}'

/*
6. Social Media:
@swagger
/disasters/{id}/social-media:
  get:
    summary: Get social media reports for a disaster
    tags: [SocialMedia]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    responses:
      200:
        description: List of social media posts
*/
curl http://localhost:3000/disasters/<id>/social-media

/*
7. Resources Near:
@swagger
/disasters/{id}/resources:
  get:
    summary: Get resources near a location
    tags: [Resources]
    parameters:
      - in: query
        name: lat
        schema:
          type: number
      - in: query
        name: lon
        schema:
          type: number
    responses:
      200:
        description: List of nearby resources
*/
curl "http://localhost:3000/disasters/<id>/resources?lat=40.7128&lon=-74.0060"

/*
8. Official Updates:
@swagger
/disasters/{id}/official-updates:
  get:
    summary: Get official updates for a disaster
    tags: [Updates]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    responses:
      200:
        description: List of scraped updates
*/
curl http://localhost:3000/disasters/<id>/official-updates

/*
9. Image Verification:
@swagger
/disasters/{id}/verify-image:
  post:
    summary: Verify the authenticity of an image
    tags: [Verification]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              image_url:
                type: string
    responses:
      200:
        description: Verification result
*/
curl -X POST http://localhost:3000/disasters/<id>/verify-image \
  -H "Content-Type: application/json" \
  -d '{"image_url": "http://example.com/image.jpg"}'
*/

// ‚úÖ Swagger Annotations have now been embedded inline above each endpoint as JSDoc-compatible blocks.
// The Swagger UI should now correctly display all routes.

// All core functionality is now live and testable.
